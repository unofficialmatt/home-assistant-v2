sensor:
  - platform: template
    sensors:
      kitchen_temperature:
        friendly_name: "Kitchen Temperature"
        value_template: "{{ state_attr('climate.kitchen', 'current_temperature') }}"
        unit_of_measurement: "°C"
      kitchen_target_temperature:
        friendly_name: "Kitchen Target Temperature"
        value_template: "{{ state_attr('climate.kitchen', 'temperature') }}"
        unit_of_measurement: "°C"

automation:
  - alias: Kitchen - turn on radiator
    id: "kitchen_radiator_on"
    description: "Turns on Kitchen Radiator when occupancy is detected, with a temperature dependent on the time of day"
    trigger:
      - platform: time_pattern
        minutes: "/5"
      - platform: state
        entity_id: binary_sensor.kitchen_occupancy
        to: "on"
    condition:
      condition: and
      conditions:
        # 1. The room is occupied
        - condition: state
          entity_id: binary_sensor.kitchen_occupancy
          state: "on"
        # 2. The house is occupied - don't turn on if it's just the cat
        - condition: state
          entity_id: input_select.home_status
          state: "Home"
        # 3. The temperature in the room is lower than the target temperature
        - condition: or
          conditions:
            - condition: template
              value_template: "{{ states('sensor.kitchen_temperature') | float < states('sensor.room_target_temperature') | float - 0.5 }}"
        # 4. The target temperature of the radiator does not already match the target temperature we want (prevents this automation running every 5 mins)
        - condition: template
          value_template: "{{ state_attr('climate.kitchen', 'temperature') | float != states('sensor.room_target_temperature') | float }}"
    action:
      - action: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.room_target_temperature') | int }}"
        target:
          entity_id: climate.kitchen

  - alias: Kitchen - turn off radiator
    id: "kitchen_radiator_off"
    description: "Turns off Kitchen Radiator when occupancy is not detected for 10 minutes"
    trigger:
      - platform: state
        entity_id: binary_sensor.kitchen_occupancy
        to: "off"
        for:
          minutes: 10
    condition:
      # The target temperature does not already match the unoccupied target temperature we want
      - condition: template
        value_template: "{{ state_attr('climate.kitchen', 'temperature') | float != states('sensor.unoccupied_target_temperature') | float }}"
    action:
      - action: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.unoccupied_target_temperature') | int }}"
        target:
          entity_id: climate.kitchen
