tts:
  - platform: amazon_polly
    aws_access_key_id: !secret aws_access_key_id
    aws_secret_access_key: !secret aws_secret_access_key
    voice: Matthew
    text_type: ssml
    cache: True

input_boolean:
  tts_notifications:
    name: TTS Notifications
    initial: on
    icon: mdi:text-to-speech

# TTS ENGINE
script:
  tts_engine:
    ## The TTS Engine takes the following optional variables and passes them to tts_process which does the heavy lifting
    ## TTS Engine checks that all necessary conditions have been fulfilled, and whether a media player has been defined
    ## - media_player: the media player to pass TTS through
    ## - call_no_greeting: whether or not to say hello
    ## - tts_message : the message to speak
    ## TODO - call_inside_weather: announce the inside temperature and humidity
    ## TODO - call_outside_weather: announce the outside weather
    ## TODO - call_full_moon: if it's a full moon tonight, announce
    ## TODO - call_empty_robbie: if roobie needs emptying, announce
    ## TODO - call_uv_index: if it's a sunny day, announce
    ## - call_no_signoff: whether or not to say goodbye

    alias: TTS Engine
    sequence:
      ## ONLY RUN THE ENGINE IF BETWEEN 0530-2400, SOMEONE IS HOME,
      ## TTS NOTIFICATIONS ARE ON AND WE ARE NOT ASLEEP
      - condition: and
        conditions:
          - condition: time
            after: "05:30"
            before: "23:59"
          - condition: state
            entity_id: input_select.home_status
            state: "Home"
          - condition: state
            entity_id: input_boolean.tts_notifications
            state: "on"
          # TODO:
          #- condition: or
          #  conditions:
          #    - condition: state
          #      entity_id: input_select.master_bedroom_sleep_mode
          #      state: Lights On
          #    - condition: state
          #      entity_id: input_select.master_bedroom_sleep_mode
          #      state: "Off"
      ## TODO EVENTUALLY DO THIS SO THAT GOOGLE SPEAKERS CONTINUE PLAYING...
      - service: script.tts_process
        data:
          ## IF NO DATA IS PASSED, DEFAULT TO ALL
          ## IF SEQUENCE, SPLIT AND CONCAT WITH ,
          ## ELSE TAKE VALUE PASSED
          media_player: >-
            {% if media_player | length == 0 %}
              {% set media_player = 'media_player.whole_home' %}
            {% endif %}
            {% if media_player is not string and media_player is sequence %}
              {% set media_player = media_player|join(', ') %}
            {% endif %}
            {{ media_player }}
          speech_message: !include ../inc/speech_template.yaml

  tts_process:
    alias: TTS Process
    sequence:
      # - service: notify.mobile_app_matts_iphone
      #   data:
      #     title: >
      #       {{ media_player }}
      #     message: >
      #       {{ speech_message }}
      - service: media_player.volume_set
        data:
          entity_id: >
            {{ media_player }}
          volume_level: >-
            {% if now().strftime('%H')|int < 10 and now().strftime('%H')|int > 6 %}
              0.5
            {% elif now().strftime('%H')|int > 10 and now().strftime('%H')|int < 20 %}
              0.4
            {% else %}
              0.3
            {% endif %}
      - service: tts.amazon_polly_say
        data:
          entity_id: >
            {{ media_player }}
          message: >-
            <speak>
              <amazon:auto-breaths volume="x-loud" frequency="x-high">
              {{ speech_message }}
              </amazon:auto-breaths>
            </speak>

automation:
  - alias: Test Speech Engine
    id: "1676535810"
    trigger:
      platform: state
      entity_id: input_boolean.test_notify_engine
      to: "on"
    action:
      # TODO
      # - service: script.notify_engine
      #   data:
      #     notify_title: '{{ "\uD83C\uDF27" }} Rain Warning'
      #     notify_message: "There is a {{states('sensor.chance_of_rain')}}% chance it might rain soon! There is a storm {{ states. sensor.darksky_nearest_storm_distance.state }} miles away."
      - service: script.tts_engine
        data:
          media_player: media_player.master_bedroom_wifi
          call_inside_weather: 0
          call_outside_weather: 0
          call_full_moon: 0
          call_empty_robbie: 0
          call_uv_index: 0
          tts_message: "this is a test message"
