automation:
  - alias: Lounge and Dining Room - turn on lights
    id: "1701243290"
    description: "Turns on Lounge and Dining Room Lights when motion is detected"
    trigger:
      - platform: state
        entity_id: binary_sensor.lounge_occupancy
        to: "on"
        # TODO: Only if it's dark
        # TODO: What if room is already occupied?
    condition:
      - condition: state
        entity_id: light.lounge
        state: "off"
    action:
      - service: light.turn_on
        entity_id: light.lounge
      - service: light.turn_on
        entity_id: light.dining_room

  - alias: Lounge and Dining Room - turn off lights
    id: "1701243291"
    description: "Turns off Lounge and Dining Room Lights when occupancy is no longer detected"
    trigger:
      - platform: state
        entity_id: binary_sensor.lounge_occupancy
        to: "off"
        for:
          minutes: 5
    action:
      - service: light.turn_off
        entity_id: light.lounge
        data:
          transition: 5
      - service: light.turn_on
        entity_id: light.dining_room
        data:
          transition: 5

  - alias: Lounge and Dining Room - turn on radiator
    id: "1701243292"
    description: "Turns on Lounge and Dining Room Radiator when occupancy is detected, with a temperature dependent on the time of day"
    trigger:
      - platform: time_pattern
        minutes: "/5"
      - platform: state
        entity_id: binary_sensor.lounge_occupancy
        to: "on"
    condition:
      condition: and
      conditions:
        # 1. The room is occupied
        - condition: state
          entity_id: binary_sensor.lounge_occupancy
          state: "on"
        # 2. It's cold outside
        # - condition: numeric_state
        #   entity_id: sensor.weatherbit_apparent_temperature
        #   below: 8
        # 3. The temperature in the room is lower than the target temperature
        - condition: or
          conditions:
            - condition: template
              value_template: "{{ states('sensor.lounge_temperature') | float < states('sensor.room_target_temperature') | float - 0.5 }}"
            - condition: template
              value_template: "{{ states('sensor.dining_room_temperature') | float < states('sensor.room_target_temperature') | float - 0.5 }}"
        # 4. The target temperature of the radiator does not already match the target temperature we want (prevents this automation running every 5 mins)
        - condition: template
          value_template: "{{ state_attr('climate.lounge', 'temperature') | float != states('sensor.room_target_temperature') | float }}"

    action:
      - service: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.room_target_temperature') | int }}"
        target:
          entity_id: climate.lounge
      - service: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.room_target_temperature') | int }}"
        target:
          entity_id: climate.dining_room

  - alias: Lounge and Dining Room - turn off radiator
    id: "1701243293"
    description: "Turns off Lounge and Dining Room Radiator when occupancy is not detected for 10 minutes"
    trigger:
      - platform: state
        entity_id: binary_sensor.lounge_occupancy
        to: "off"
        for:
          minutes: 10
    action:
      - service: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.unoccupied_target_temperature') | int }}"
        target:
          entity_id: climate.lounge
      - service: climate.set_temperature
        data_template:
          temperature: "{{ states('sensor.unoccupied_target_temperature') | int }}"
        target:
          entity_id: climate.dining_room
