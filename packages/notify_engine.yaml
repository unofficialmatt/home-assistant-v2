# https://community.home-assistant.io/t/notify-alert-only-people-present-in-the-house-howto/277736/4

# Dummy notify service to use when no one is home
notify:
  - name: Dummy
    platform: rest
    resource: http://localhost:0000/notify

automation:
  - alias: Test Notify Debug
    id: "1676535820"
    trigger:
      platform: state
      entity_id: input_boolean.test_notify_engine
      to: "on"
    action:
      - service: script.notify_engine
        data:
          TITLE: "DEBUG"
          MESSAGE: "This is the message to send"
          DEBUG: false
          INTERUPTION_MODE: "critical"
          LOCATION: "any"

script:
  notify_engine:
    alias: Notify Engine
    mode: parallel
    fields:
      TITLE:
        description: "Title of the notification"
        example: "Washing done"
        required: true
      MESSAGE:
        description: "Message of the notification"
        example: "The washing is complete"
        required: true
      LOCATION:
        description: "Location state of people to notify"
        example: "home"
        default: "any"
        required: false
      INTERUPTION_MODE:
        description: "The interruption level of the notification"
        example: "critical"
        default: "active"
        required: false
      DEBUG:
        description: "Only send messages to Matt"
        example: false
        default: false
        required: false
    sequence:
      - variables:
          NOTIFIERS: >
            {% if LOCATION == "any" and DEBUG == "true"  %}
              {{ states.person | selectattr("entity_id", "eq", "person.matt") |  map(attribute='attributes.notifier') | list }}
            {% elif LOCATION == "any" %}
              {{ states.person | map(attribute='attributes.notifier') | list }}
            {% elif DEBUG == "true" %}
              {{ states.person | selectattr("entity_id", "eq", "person.matt") | selectattr('state', 'eq', LOCATION) | map(attribute='attributes.notifier') | list }}
            {% else %}
              {{ states.person | selectattr('state', 'eq', LOCATION) | map(attribute='attributes.notifier') | list }}
            {% endif %}
      # Iterate through all the people and send the relevant notification
      - repeat:
          count: "{{ NOTIFIERS | count }}"
          sequence:
            - variables:
                NOTIFIER: "{{ NOTIFIERS[repeat.index - 1] }}"
            - service: "{{ NOTIFIER }}"
              data:
                title: "{{ TITLE }}"
                message: "{{ MESSAGE }}"
                data:
                  push:
                    interruption-level: "{{ INTERUPTION_MODE }}"

      # Matt's MBP
      - service: >
          {% if LOCATION == "any" and is_state('binary_sensor.matts_mbp_active', 'on') %}
              notify.mobile_app_matts_mbp
          {% elif is_state('device_tracker.matts_mbp', LOCATION) and is_state('binary_sensor.matts_mbp_active', 'on') %}
              notify.mobile_app_matts_mbp
          {% else %}
              notify.dummy
          {% endif %}
        data:
          title: "{{ TITLE }}"
          message: "{{ MESSAGE }}"
          data:
            push:
              interruption-level: "{{ INTERUPTION_MODE }}"
